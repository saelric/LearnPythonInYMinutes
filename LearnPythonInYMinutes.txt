saelric@saelricPc:~$ script archivo.txt
Script started, file is archivo.txt
saelric@saelricPc:~$ python3
Python 3.5.2 (default, Sep 14 2017, 22:51:06) 
[GCC 5.4.0 20160609] on linux
Type "help", "copyright", "credits" or "license" for more information.
>>> 3
3
>>> 1 + 1 
2
>>> 8 - 1
7
>>> 10 * 2 
20
>>> 35 / 5  
7.0
>>> 5 // 3  
1
>>> 5.0 // 3.0
1.0
>>> -5 // 3 
-2
>>> -5.0 // 3.0
-2.0
>>> 10.0 / 3
KeyboardInterrupt
>>> 7 % 3
1
>>> 2**3
8
>>> (1 + 3) * 2
8
>>> True
True
>>> False
False
>>> not True 
False
>>> not False 
True
>>> True and False
False
>>> False or True
True
>>> 0 and 2 
0
>>> -5 or 0   
-5
>>> 0 == False
True
>>> 2 == True
False
>>> 1 == True 
True
>>> -5 != False != True
True
>>> 1 == 1  
True
>>> 2 == 1
False
>>> 1 != 1
False
>>> 2 != 1
True
>>> 1 < 10
True
>>> 1 > 10 
False
>>> 2 <= 2
True
>>> 2 >= 2 
True
>>> 1 < 2 < 3 
True
>>> 2 < 3 < 2
False
>>> a = [1, 2, 3, 4]
>>> b = a   
>>> b is a 
True
>>> b == a 
True
>>> b = [1, 2, 3, 4]
>>> b is a 
False
>>> b == a
True
>>> "This is a string."
'This is a string.'
>>> 'This is also a string.'
'This is also a string.'
>>> "Hello " + "world!"
'Hello world!'
>>> "Hello " "world!"    # => "Hello world!"
'Hello world!'
>>> "This is a string"[0] 
'T'
>>> len("This is a string") 
16
>>> "{} can be {}".format("Strings", "interpolated")
'Strings can be interpolated'
>>> "{0} be nimble, {0} be quick, {0} jump over the {1}".format("Jack", "candle stick")
'Jack be nimble, Jack be quick, Jack jump over the candle stick'
>>> "{name} wants to eat {food}".format(name="Bob", food="lasagna") 
'Bob wants to eat lasagna'
>>> "%s can be %s the %s way" % ("Strings", "interpolated", "old") 
'Strings can be interpolated the old way'
>>> None
>>> "etc" is None  
False
>>> None is None
True
>>> bool(0)  
False
>>> bool("")
False
>>> bool([])
False
>>> bool({})
False
>>> bool(()) 
False
>>> 
>>> 
>>> ####################################################
... ## 2. Variables and Collections
... ####################################################
... 
>>> print("I'm Python. Nice to meet you!") 
I'm Python. Nice to meet you!
>>> print("Hello, World", end="!")
Hello, World!>>> input_string_var = input("Enter some data: ")
Enter some data: Holi
>>> some_var = 5
>>> some_var 
5
>>> some_unknown_var
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'some_unknown_var' is not defined
>>> "yahoo!" if 3 > 2 else 2
'yahoo!'
>>> li = []
>>> other_li = [4, 5, 6]
>>> li.append(1)
>>> li.append(2) 
>>> li.append(4)
>>> li.append(3)
>>> li.pop()   
3
>>> li.append(3)
>>> li[0] 
1
>>> li[-1]
3
>>> li[4]
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
IndexError: list index out of range
>>> li[1:3] 
[2, 4]
>>> li[2:] 
[4, 3]
>>> li[:3] 
[1, 2, 4]
>>> li[::2] 
[1, 4]
>>> li[::-1]
[3, 4, 2, 1]
>>> li2 = li[:]
>>> del li[2]
>>> li.remove(2) 
>>> li.remove(2) 
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ValueError: list.remove(x): x not in list
>>> li.insert(1, 2) 
>>> li.index(2)
1
>>> li.index(4) 
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ValueError: 4 is not in list
>>> li + other_li
[1, 2, 3, 4, 5, 6]
>>> li.extend(other_li)
>>> 1 in li 
True
>>> len(li) 
6
>>> tup = (1, 2, 3)
>>> tup[0] 
1
>>> tup[0] = 3 
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'tuple' object does not support item assignment
>>> type((1)) 
<class 'int'>
>>> type((1,)) 
<class 'tuple'>
>>> type(())
<class 'tuple'>
>>> 
>>> len(tup)
3
>>> tup + (4, 5, 6) 
(1, 2, 3, 4, 5, 6)
>>> tup[:2] 
(1, 2)
>>> 2 in tup 
True
>>> a, b, c = (1, 2, 3)
>>> a, *b, c = (1, 2, 3, 4) 
>>> d, e, f = 4, 5, 6
>>> e, d = d, e
>>> empty_dict = {}
>>> filled_dict = {"one": 1, "two": 2, "three": 3}
>>> invalid_dict = {[1,2,3]: "123"}
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: unhashable type: 'list'
>>> valid_dict = {(1,2,3):[1,2,3]}
>>> filled_dict["one"]
1
>>> list(filled_dict.keys()) 
['one', 'three', 'two']
>>> list(filled_dict.values()) 
[1, 3, 2]
>>> "one" in filled_dict
True
>>> 1 in filled_dict  
False
>>> filled_dict["four"]
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
KeyError: 'four'
>>> filled_dict.get("one")
1
>>> filled_dict.get("four")
>>> filled_dict.get("one", 4)
1
>>> filled_dict.get("four", 4)
4
>>> filled_dict.setdefault("five", 5)
5
>>> filled_dict.setdefault("five", 6) 
5
>>> filled_dict.update({"four":4})
>>> filled_dict["four"] = 4   
>>> del filled_dict["one"]
>>> {'a': 1, **{'b': 2}} 
{'a': 1, 'b': 2}
>>> {'a': 1, **{'a': 2}}
{'a': 2}
>>> empty_set = set()
>>> some_set = {1, 1, 2, 2, 3, 4}
>>> invalid_set = {[1], 1} 
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: unhashable type: 'list'
>>> valid_set = {(1,), 1}
>>> filled_set = some_set
>>> filled_set.add(5) 
>>> other_set = {3, 4, 5, 6}
>>> filled_set & other_set 
{3, 4, 5}
>>> filled_set | other_set  
{1, 2, 3, 4, 5, 6}
>>> {1, 2, 3, 4} - {2, 3, 5} 
{1, 4}
>>> {1, 2, 3, 4} ^ {2, 3, 5} 
{1, 4, 5}
>>> {1, 2} >= {1, 2, 3} 
False
>>> {1, 2} <= {1, 2, 3}
True
>>> 2 in filled_set 
True
>>> 10 in filled_set
False
>>> 
>>> ####################################################
... ## 3. Control Flow and Iterables
... ####################################################
... 
>>> some_var = 5
>>> if some_var > 10:
...     print("some_var is totally bigger than 10.")
... elif some_var < 10:
...     print("some_var is smaller than 10.")
... else:  
...     print("some_var is indeed 10.")
... 
some_var is smaller than 10.
>>> for animal in ["dog", "cat", "mouse"]:
...     print("{} is a mammal".format(animal))
... 
dog is a mammal
cat is a mammal
mouse is a mammal
>>> for i in range(4):
...     print(i)
... 
0
1
2
3
>>> 
>>> for i in range(4, 8):
... 
  File "<stdin>", line 2
    
    ^
IndentationError: expected an indented block
>>> for i in range(4, 8):
...      print(i)
... 
4
5
6
7
>>> for i in range(4, 8, 2):
...     print(i)
... 
4
6
>>> x = 0
>>> while x < 4:
...     print(x)
...     x += 1  
... 
0
1
2
3
>>> try:
...     raise IndexError("This is an index error")
... except IndexError as e:
...     pass
... except (TypeError, NameError):
...     pass
... else: 
...     print("All good!")
... finally: 
...     print("We can clean up resources here")
... 
We can clean up resources here
>>> with open("myfile.txt") as f:
...     for line in f:
...             print(line)
... 
holi

1

2

3

4

a

b

c

>>> filled_dict = {"one": 1, "two": 2, "three": 3}
>>> our_iterable = filled_dict.keys()
>>> print(our_iterable)
dict_keys(['one', 'three', 'two'])
>>> for i in our_iterable:
...     print(i)  
... 
one
three
two
>>> our_iterable[1]
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'dict_keys' object does not support indexing
>>> our_iterator = iter(our_iterable)
>>> next(our_iterator) 
'one'
>>> next(our_iterator)
'three'
>>> next(our_iterator) 
'two'
>>> next(our_iterator) 
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
StopIteration
>>> list(filled_dict.keys())
['one', 'three', 'two']
>>> ####################################################
... ## 4. Functions
... ####################################################
... 
>>> def add(x, y):
...     print("x is {} and y is {}".format(x, y))
...     return x + y 
... 
>>> add(5, 6) 
x is 5 and y is 6
11
>>> add(y=6, x=5)
x is 5 and y is 6
11
>>> def varargs(*args):
...     return args
... 
>>> varargs(1, 2, 3)
(1, 2, 3)
>>> def keyword_args(**kwargs):
...     return kwargs
... 
>>> keyword_args(big="foot", loch="ness") 
{'big': 'foot', 'loch': 'ness'}
>>> def all_the_args(*args, **kwargs):
...     print(args)
...     print(kwargs)
... 
>>> args = (1, 2, 3, 4)
>>> kwargs = {"a": 3, "b": 4}
>>> all_the_args(*args)    
(1, 2, 3, 4)
{}
>>> all_the_args(**kwargs)   
()
{'a': 3, 'b': 4}
>>> all_the_args(*args, **kwargs) 
(1, 2, 3, 4)
{'a': 3, 'b': 4}
>>> def swap(x, y):
...     return y, x 
... 
>>> x = 1
>>> y = 2
>>> x, y = swap(x, y) 
>>> x = 5
>>> def set_x(num):
...     x = num
...     print(x)
... 
>>> def set_global_x(num):
...     global x
...     print(x)  
...     x = num 
...     print(x)
... 
>>> set_x(43)
43
>>> set_global_x(6)
5
6
>>> def create_adder(x):
...     def adder(y):
...             return x + y
...     return adder
... 
>>> add_10 = create_adder(10)
>>> add_10(3)
13
>>> (lambda x: x > 2)(3) 
True
>>> (lambda x, y: x ** 2 + y ** 2)(2, 1) 
5
>>> list(map(add_10, [1, 2, 3]))
[11, 12, 13]
>>> list(map(max, [1, 2, 3], [4, 2, 1]))  
[4, 2, 3]
>>> list(filter(lambda x: x > 5, [3, 4, 5, 6, 7])) 
[6, 7]
>>> [add_10(i) for i in [1, 2, 3]]    
[11, 12, 13]
>>> [x for x in [3, 4, 5, 6, 7] if x > 5] 
[6, 7]
>>> {x for x in 'abcddeef' if x not in 'abc'} 
{'e', 'd', 'f'}
>>> {x: x**2 for x in range(5)} 
{0: 0, 1: 1, 2: 4, 3: 9, 4: 16}
>>> ####################################################
... ## 5. Modules
... ####################################################
... 
>>> import math
>>> print(math.sqrt(16))
4.0
>>> from math import ceil, floor
>>> print(ceil(3.7)) 
4
>>> print(floor(3.7))
3
>>> from math import *
>>> import math as m
>>> math.sqrt(16) == m.sqrt(16)
True
>>> import math
>>> dir(math)
['__doc__', '__loader__', '__name__', '__package__', '__spec__', 'acos', 'acosh', 'asin', 'asinh', 'atan', 'atan2', 'atanh', 'ceil', 'copysign', 'cos', 'cosh', 'degrees', 'e', 'erf', 'erfc', 'exp', 'expm1', 'fabs', 'factorial', 'floor', 'fmod', 'frexp', 'fsum', 'gamma', 'gcd', 'hypot', 'inf', 'isclose', 'isfinite', 'isinf', 'isnan', 'ldexp', 'lgamma', 'log', 'log10', 'log1p', 'log2', 'modf', 'nan', 'pi', 'pow', 'radians', 'sin', 'sinh', 'sqrt', 'tan', 'tanh', 'trunc']
>>> ####################################################
... ## 6. Classes
... ####################################################
... 
>>> class Human:
...     species = "H. sapiens"
...     def __init__(self, name):
...             self.name = name
...             self._age = 0
...     def say(self, msg):
...             print("{name}: {message}".format(name=self.name, message=msg))
...     def sing(self):
...             return 'yo... yo... microphone check... one two... one two...'
...     @classmethod
...     def get_species(cls):
...             return cls.species
...     @staticmethod
...     def grunt():
...             return "*grunt*"
...     @property
...     def age(self):
...             return self._age
...     @age.setter
...     def age(self, age):
...             self._age = age
...     @age.deleter
...     def age(self):
...             del self._age
... 
>>> if __name__ == '__main__':
...     i = Human(name="Ian")
...     i.say("hi")    
...     j = Human("Joel")
...     j.say("hello")   
...     i.say(i.get_species())    
...     Human.species = "H. neanderthalensis"
...     i.say(i.get_species())    
...     j.say(j.get_species()) 
...     print(Human.grunt()) 
...     print(i.grunt()) 
...     i.age = 42
...     i.say(i.age) 
...     j.say(j.age)  
...     del i.age
... 
Ian: hi
Joel: hello
Ian: H. sapiens
Ian: H. neanderthalensis
Joel: H. neanderthalensis
*grunt*
*grunt*
Ian: 42
Joel: 0
>>> ####################################################
... ## 6.1 Inheritance
... ####################################################
... class Superhero(Human):
...     species = 'Superhuman'
...     def __init__(self, name, movie=False,
...                  superpowers=["super strength", "bulletproofing"]):
...             self.fictional = True
...             self.movie = movie
...             self.superpowers = superpowers
...             super().__init__(name)
...     def sing(self):
...             return 'Dun, dun, DUN!'
...     def boast(self):
...             for power in self.superpowers:
...                     print("I wield the power of {pow}!".format(pow=power))
...     
... 
>>> if __name__ == '__main__':
...     sup = Superhero(name="Tick")
...     if isinstance(sup, Human):
...             print('I am human')
...     if type(sup) is Superhero:
...             print('I am a superhero')
...     print(Superhero.__mro__) 
...     print(sup.get_species()) 
...     print(sup.sing()) 
...     sup.say('Spoon')
...     sup.boast()  
...     sup.age = 31
...     print(sup.age)
...     print('Am I Oscar eligible? ' + str(sup.movie))
... 
I am human
I am a superhero
(<class '__main__.Superhero'>, <class '__main__.Human'>, <class 'object'>)
Superhuman
Dun, dun, DUN!
Tick: Spoon
I wield the power of super strength!
I wield the power of bulletproofing!
31
Am I Oscar eligible? False
>>> 
KeyboardInterrupt
>>> ####################################################
... ## 6.2 Multiple Inheritance
... ####################################################
... 
>>> class Bat:
...     species = 'Baty'
...     def __init__(self, can_fly=True):
...             self.fly = can_fly
...     def say(self, msg):
...             msg = '... ... ...'
...             return msg
...     def sonar(self):
...             return '))) ... ((('
... 
>>> if __name__ == '__main__':
...     b = Bat()
...     print(b.say('hello'))
...     print(b.fly)
... 
... ... ...
True
>>> from superhero import Superhero
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ImportError: No module named 'superhero'
>>> from bat import Bat
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ImportError: No module named 'bat'
>>> class Batman(Superhero, Bat):
...     def __init__(self, *args, **kwargs):
...             Superhero.__init__(self, 'anonymous', movie=True, 
...                            superpowers=['Wealthy'], *args, **kwargs)
...             Bat.__init__(self, *args, can_fly=False, **kwargs)
...             self.name = 'Sad Affleck'
...     def sing(self):
...             return 'nan nan nan nan nan batman!'
... 
>>> if __name__ == '__main__':
...     sup = Batman()
...     print(Batman.__mro__) 
...     print(sup.get_species())  
...     print(sup.sing())   
...     sup.say('I agree') 
...     print(sup.sonar()) 
...     sup.age = 100
...     print(sup.age)
...     print('Can I fly? ' + str(sup.fly)) 
... 
(<class '__main__.Batman'>, <class '__main__.Superhero'>, <class '__main__.Human'>, <class '__main__.Bat'>, <class 'object'>)
Superhuman
nan nan nan nan nan batman!
Sad Affleck: I agree
))) ... (((
100
Can I fly? False
>>> ####################################################
... ## 7. Advanced
... ####################################################
... 
>>> def double_numbers(iterable):
...     for i in iterable:
...             yield i + i
... 
>>> for i in double_numbers(range(1, 900000000)): 
...     print(i)
...     if i >= 30:
...             break
... 
2
4
6
8
10
12
14
16
18
20
22
24
26
28
30
>>> values = (-x for x in [1,2,3,4,5])
>>> for x in values:
...     print(x)
... 
-1
-2
-3
-4
-5
>>> values = (-x for x in [1,2,3,4,5])
>>> gen_to_list = list(values)
>>> print(gen_to_list)
[-1, -2, -3, -4, -5]
>>> from functools import wraps
>>> def beg(target_function):
...     @wraps(target_function)
...     def wrapper(*args, **kwargs):
...             msg, say_please = target_function(*args, **kwargs)
...             if say_please:
...                     return "{} {}".format(msg, "Please! I am poor :(")
...             return msg
...     return wrapper
... 
>>> @beg
... def say(say_please=False):
...     msg = "Can you buy me a beer?"
...     return msg, say_please
... 
>>> print(say())
Can you buy me a beer?
>>> print(say(say_please=True))
Can you buy me a beer? Please! I am poor :(
>>> 

